#!/usr/bin/env bash
#-Metadata----------------------------------------------------#
#  Filename: sudomy (v1.2.1)             (Update: 2021-01-04) #
#-Info--------------------------------------------------------#
#  Fast Subdomain Enumeration & Analysis.                     #
#-Author(s)---------------------------------------------------#
#  Edo maland ~ @screetsec                                    #
#-Operating System--------------------------------------------#
#  Designed for & tested on: Linux 	                      #
#  Reported working : Ubuntu 18                               #
#	   	    : Parrot 				      #
#                   : Kali Linux 			      #
#		    : WSL Windows (10.0.17134 N/A Build 17134 #
#		    : MacOS (Big Sur)			      #
#-Licence-----------------------------------------------------#
#  MIT License ~ http://opensource.org/licenses/MIT           #
#-------------------------------------------------------------#


### Variable Name and Version

APPNAME="sud⍥my.sh"
VERSION="1.2.1#dev"

### Calling Source
source sudomy.api
source slack.conf
source sudomy.conf

#### Command calling
goBanner(){
echo -e ${RED}" ___         _${YELLOW} _  _ ${GREEN}          ${RESET}";
echo -e ${RED}"/ __|_  _ __| ${YELLOW}(_)(_)${GREEN}_ __ _  _ ${RESET}";
echo -e ${RED}"\__ \ || / _  ${YELLOW}/ __ \ ${GREEN} ' \ || |${RESET}";
echo -e ${RED}"|___/\_,_\__,_${YELLOW}\____/${GREEN}_|_|_\_, |${RESET}";
echo -e ${RED}"              ${YELLOW}      ${GREEN}      |__/${RESET} v{${RED}${VERSION}${RESET}} by ${GREEN}@screetsec ${RESET}";
echo -e "${YELLOW}Sud⍥my ${RESET}- Fast Subdmain Enumeration and Analyzer ${RESET}     "
echo -e "\t http://github.com/screetsec/sudomy\n"
}

#### Colors Output

RESET="\033[0m"			# Normal Colour
RED="\033[0;31m" 		# Error / Issues
GREEN="\033[0;32m"		# Successful       
BOLD="\033[01;01m"    		# Highlight
WHITE="\033[1;37m"		# BOLD
YELLOW="\033[1;33m"		# Warning
PADDING="  "
DPADDING="\t\t"


#### Other Colors / Status Code

LGRAY="\033[0;37m"		# Light Gray
LRED="\033[1;31m"		# Light Red
LGREEN="\033[1;32m"		# Light GREEN
LBLUE="\033[1;34m"		# Light Blue
LPURPLE="\033[1;35m"		# Light Purple
LCYAN="\033[1;36m"		# Light Cyan
SORANGE="\033[0;33m"		# Standar Orange
SBLUE="\033[0;34m"		# Standar Blue
SPURPLE="\033[0;35m"		# Standar Purple      
SCYAN="\033[0;36m"		# Standar Cyan
DGRAY="\033[1;30m"		# Dark Gray

goHelp(){
goBanner;
 echo -e "${BOLD}Usage${RESET}: ${APPNAME} [${BOLD}-h [--help]$RESET] [${BOLD}-s[--source]${RESET}][${BOLD}-d[--domain=]${RESET}] \n"
 echo -e "${BOLD}Example${RESET}: ${APPNAME} ${BOLD}-d ${RESET}example.com${PADDING} "
 echo -e "${PADDING}${PADDING}${PADDING}${PADDING} ${APPNAME} ${BOLD}-s${RESET} Shodan,VirusTotal ${BOLD}-d ${RESET}example.com"
 echo -e "\n${BOLD}Best Argument:${RESET}"
 echo -e "${PADDING}${RESET}sudomy -d domain.com -dP -eP -rS -cF -pS -tO -gW --httpx --dnsprobe  -aI webanalyze --slack -sS\n"
 echo -e "\n${BOLD}Optional Arguments:${RESET}"
 echo -e "${PADDING}${BOLD}-a, ${RESET} --all${DPADDING} Running all Enumeration, no nmap & gobuster "
 echo -e "${PADDING}${BOLD}-b, ${RESET} --bruteforce\t Bruteforce Subdomain Using Gobuster (Wordlist: ALL Top SecList DNS) "
 echo -e "${PADDING}${BOLD}-d, ${RESET} --domain${DPADDING} domain of the website to scan"
 echo -e "${PADDING}${BOLD}-h, ${RESET} --help${DPADDING} show this help message"
 echo -e "${PADDING}${BOLD}-o, ${RESET} --outfile\t specify an output file when completed "
 echo -e "${PADDING}${BOLD}-s, ${RESET} --source${DPADDING} Use source for Enumerate Subdomain"
 echo -e "${PADDING}${BOLD}-aI,${RESET} --apps-identifier Identify technologies on website (ex: -aI webanalyze)"
 echo -e "${PADDING}${BOLD}-dP,${RESET} --db-port\t Collecting port from 3rd Party default=shodan"
 echo -e "${PADDING}${BOLD}-eP,${RESET} --extract-params\t Collecting URL Parameter from Engine"
 echo -e "${PADDING}${BOLD}-tO,${RESET} --takeover\t Subdomain TakeOver Vulnerabilty Scanner"
 echo -e "${PADDING}${BOLD}-wS,${RESET} --websocket\t WebSocket Connection Check"
 echo -e "${PADDING}${BOLD}-cF,${RESET} --cloudfare\t Check an IP is Owned by Cloudflare" 
 echo -e "${PADDING}${BOLD}-pS,${RESET} --ping-sweep\t Check live host using methode Ping Sweep"
 echo -e "${PADDING}${BOLD}-rS,${RESET} --resolver\t Convert domain lists to resolved IP lists without duplicates"
 echo -e "${PADDING}${BOLD}-sC,${RESET} --status-code\t Get status codes, response from domain list"
 echo -e "${PADDING}${BOLD}-nT,${RESET} --nmap-top\t Port scanning with top-ports using nmap from domain list"
 echo -e "${PADDING}${BOLD}-sS,${RESET} --screenshot\t Screenshots a list of website (default: gowitness)"
 echo -e "${PADDING}${BOLD}-nP,${RESET} --no-passive\t Do not perform passive subdomain enumeration "
 echo -e "${PADDING}${BOLD}-gW,${RESET} --gwordlist\t Generate wordlist based on collecting url resources (Passive) "
 echo -e "${PADDING}${BOLD}    ${RESET} --httpx${DPADDING} Perform httpx multiple probers using retryablehttp "
 echo -e "${PADDING}${BOLD}    ${RESET} --dnsprobe\t Perform multiple dns queries (dnsprobe) "
 echo -e "${PADDING}${BOLD}    ${RESET} --no-probe\t Do not perform httprobe "
 echo -e "${PADDING}${BOLD}    ${RESET} --html${DPADDING} Make report output into HTML " 
 echo -e "${PADDING}${BOLD}    ${RESET} --graph${DPADDING} Network Graph Visualization" 
 echo -e "${PADDING}${BOLD}    ${RESET} --smuggler\t HTTP Request Smuggling" 
 echo -e "\n${BOLD}Sources:${RESET}"
 echo -e "${PADDING}${YELLOW}+${RESET} Shodan${DPADDING} http://developer.shodan.io"
 echo -e "${PADDING}${YELLOW}+${RESET} VirusTotal${PADDING}\t https://www.virustotal.com"
 echo -e "${PADDING}${YELLOW}+${RESET} Censys${DPADDING} http://censys.io"
 echo -e "${PADDING}${YELLOW}+${RESET} Certspotter${DPADDING} https://api.certspotter.com"
 echo -e "${PADDING}${YELLOW}+${RESET} BinaryEdge${DPADDING} https://docs.binaryedge.io/"
 echo -e "${PADDING}${YELLOW}+${RESET} Hackertarget${PADDING}\t https://api.hackertarget.com"
 echo -e "${PADDING}${YELLOW}+${RESET} Threatminer${DPADDING} https://api.threatminer.org"
 echo -e "${PADDING}${YELLOW}+${RESET} CrtSH${DPADDING} https://crt.sh"
 echo -e "${PADDING}${YELLOW}+${RESET} DnsDB${DPADDING} https://www.dnsdb.info"
 echo -e "${PADDING}${YELLOW}+${RESET} BufferOver${DPADDING} http://dns.bufferover.run"
 echo -e "${PADDING}${YELLOW}+${RESET} Sypse${DPADDING} https://spyse.com"
 echo -e "${PADDING}${YELLOW}+${RESET} Threatcrowd${DPADDING} http://threatcrowd.org"
 echo -e "${PADDING}${YELLOW}+${RESET} Dnsdumpster${DPADDING} https://dnsdumpster.com"
 echo -e "${PADDING}${YELLOW}+${RESET} Riddler${DPADDING} http://riddler.io"
 echo -e "${PADDING}${YELLOW}+${RESET} Webarchive${DPADDING} http://web.archive.org"
 echo -e "${PADDING}${YELLOW}+${RESET} SecurityTrails\t http://securitytrails.com"
 echo -e "${PADDING}${YELLOW}+${RESET} RapidDNS${DPADDING} https://rapiddns.io"
 echo -e "${PADDING}${YELLOW}+${RESET} AlienVault${DPADDING} https://otx.alienvault.com"
 echo -e "${PADDING}${YELLOW}+${RESET} CommonCrawl${DPADDING} http://index.commoncrawl.org"
 echo -e "${PADDING}${YELLOW}+${RESET} FBcert${DPADDING} https://graph.facebook.com"
 echo -e "${PADDING}${YELLOW}+${RESET} URLScan${DPADDING} https://urlscan.io"
 echo -e "${PADDING}${YELLOW}+${RESET} RiskIQ${DPADDING} https://community.riskiq.com\n"


}

[[ "${#}" == 0 ]] && {
	goHelp && exit 1
}

## Check Folder Results
[[ ! -e "${OUT}" ]] \
  && mkdir -p "${OUT}"||true

# COMMAND LINE SWITCHES
while [[ "${#}" -gt 0  ]]; do
args="${1}";
  case "$( echo ${args} | tr '[:upper:]' '[:lower:]' )" in
        # Target
        "-d" | "--domain")
            export DOMAIN="${2}"
            shift
            shift
        ;;
        "--domain="*)
            DOMAIN="${1#*=}";
            shift 1
        ;;
        # Help
        "-h"|"--help")
            goHelp
            exit 1
        ;;

      	# sources
      	"-s"|"--sources")
       	    SOURCE=true
            LIST=${2}
            shift
            shift

      	;;
       # Verbose
        "-v"|"--verbose")
            verbose=true
            shift
        ;;

      	"-ps"|"--ping-sweep")
            PLUGIN_PING_SWEEP=true
            shift
      	;;

      	"-rs"|"--resolver")
            PLUGIN_RESOLV_SD=true
            shift
      	;;
      	
      	"-sc"|"--status-code")
            PLUGIN_STATUS_CODE=true
            shift
      	;;

        "-nt"|"--nmap-top")
            PLUGIN_NMAP_PORTS=true
            shift
        ;;

        "-to"|"--takeover")
            PLUGIN_TAKEOVER=true
            shift
        ;;

        "-ws"|"--websocket")
            PLUGIN_WEBSOCKET=true
            shift
        ;;
	

        "-cf"|"--cloudfare")
            PLUGIN_CFCHECK=true
            shift
        ;;



        "-ai"|"--apps-identifier")
            APPS_IDENTIFIER=true
            LIST_API=${2}
            shift
            shift
        ;;
	
	    "-dp"|"--db-port")
    	    PLUGIN_DB_PORT=true
    	    shift
    	;;

        "-ep"|"--extract-params")
            PLUGIN_EXTRACT_PARAMS=true
            shift
        ;;


        "-ss"|"--screenshot")
            PLUGIN_DOMAIN_SCREENSHOTS=true
            LIST_SCREENSHOT=${2}
            shift
            shift
        ;; 


        "-b"|"--bruteforce")
            PLUGIN_GOBUSTER=true
            shift
        ;; 

        "-np"|"--no-passive")
            SOURCE=none
            shift
        ;; 


        "--no-probe")
            PLUGIN_HTTPROBE=false
            shift
        ;;

        "-o"|"--outfile")
            DESTINATION=true
	        OUTFILE=$2
	        shift
            shift
        ;;


        "--html")
            REPORTS=1
            shift
        ;;
	
	   "--slack")
            SLACK=true
            shift
        ;;


        "--httpx")
            PLUGIN_HTTPX=true
            shift
        ;;  


        "--dnsprobe")
            PLUGIN_DNSPROBE=true
            shift
        ;;  

	    "--graph")
    	    PLUGIN_NGRAPH=true
    	    shift
	    ;;

        "--smuggler")
            PLUGIN_SMUGGLER=true
            shift
        ;;


        "-gw"|"--gwordlist")
            PLUGIN_WORDLISTS=true
            shift
        ;;


        "-a"|"--all")
            PLUGIN_DOMAIN_SCREENSHOTS=true
            PLUGIN_TAKEOVER=true
            PLUGIN_STATUS_CODE=true
            PLUGIN_RESOLV_SD=true
            PLUGIN_PING_SWEEP=true
    	    PLUGIN_DB_PORT=true
    	    PLUGIN_EXTRACT_PARAMS=true
    	    PLUGIN_HTTPX=true
    	    PLUGIN_DNSPROBE=true
    	    PLUGIN_CFCHECK=true
    	    PLUGIN_NGRAPH=true
    	    PLUGIN_WORDLISTS=true
            shift
        ;;        
    


        "-"*)
            echo -e " ${YELLOW}[i]${RESET} Invalid option: ${RED}${1}${RESET}" && shift && exit 1
        ;;
        *)
            echo -e " ${YELLOW}[i]${RESET} Invalid: Unknown option ${RED}${1}${RESET}" && shift && exit
            exit
        ;;
    esac
done


if [ -z "${DOMAIN}" ] ; then
  echo "You need to specify a target to use. Type --help for command usage."
  exit
fi

## Check mandatory dependencies
dependencies=(nmap dig jq)
for dependency in "${dependencies[@]}"; do
    type -p "$dependency" &>/dev/null || {
        echo "error: Error: require ${dependency} but it's is not installed. Aborting." >&2
        exit 1
	}
done

## Check GNU grep for MacOS
if [[ "$(grep -V)" == *"BSD"* ]]; then 
    echo "Error: require GNU grep. Aborting." >&2
    exit 1
fi





## Check 3rd dependencies 


if [[ ${PLUGIN_WAPPALYZER} == true ]] ; then
	command -v wappalyzer > /dev/null 2>&1 || { echo "Error: require wappalyzer for identify apps but it's is not installed. Aborting." >&2;exit 1;}
fi



ARG_PARS_LIST(){
echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Parsing & Sorting list Domain "
echo -e "---------------------------------------------\n"
export DATE_LOG=$(date +%m-%d-%Y)
[[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}" ]] \
  && mkdir -p "${OUT}/${DATE_LOG}/${DOMAIN}"||true
        sed 's/\*\.//g' ${OUT}/*.log | grep -e "${DOMAIN}" | sort -u  > ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN}
        rm -r ${OUT}/*.log > /dev/null 2>&1 ##REMOVE LOG

    if [[ -f ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} ]] ; then
        COUNT=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} | wc  -l  )
        	echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Total ${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]\n"
       		cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} \
        | while read VERBOSE; do
            	echo -e ${YELLOW}"\t - ${RESET}$VERBOSE"
        done
        	echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Total ${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
     fi

}


## Calling Engine (Third Party-Sites) Total 18 
## Selecting the good third-party sites, the enumeration process can be optimized

# source ${Engine_Entrust} //  (not accessible) anymore

source ${Engine_Shodan}
source ${Engine_VirusTotal}
source ${Engine_Censys}
source ${Engine_Certspotter}
source ${Engine_BinaryEdge}
source ${Engine_Hackertarget}
source ${Engine_Threatminer}
source ${Engine_CrtSH}
source ${Engine_Spyse}
source ${Engine_BufferOver}
source ${Engine_Threatcrowd}
source ${Engine_Dnsdumpster}
source ${Engine_Riddler}
source ${Engine_Webarchive}
source ${Engine_SecurityTrails}
source ${Engine_RapidDNS}
source ${Engine_AlienVault}
source ${Engine_CommonCrawl}
source ${Engine_UrlScan}
source ${Engine_DNSDB}
source ${Engine_RiskIQ}
source ${Engine_FBCert}

# Timestamp
current_date_time=$(date "+%Y-%m-%d %H:%M:%S")

goBanner ## Called banner sudomy
echo -e "\n${BOLD}[${YELLOW}!${RESET}${BOLD}]${RESET} This tool is for ${BOLD}educational${RESET} purpose only.   "
echo -e "${BOLD} ${LGREEN} ${RESET}${BOLD} ${RESET} Usage of sudomy for ${BOLD}attacking${RESET} targets ${BOLD}without ${RESET}prior mutual consent is ${RED}illegal${RESET}   "
echo -e "${BOLD} ${LGREEN} ${RESET}${BOLD} ${RESET} developers assume no liability and are not responsible for any misuse or damage cause by this program   "
echo -e "\n${BOLD}[${LCYAN}⍥${RESET}${BOLD}]${RESET} Perfoming Sud⍥my scans  "

# pkg httprobe, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_HTTPROBE} > /dev/null 2>&1 || { 
	 echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_HTTPROBE}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_HTTPROBE} " >&2; cp -r ${PKG_HTTPROBE} /usr/local/bin/; }
# pkg httpx, checking in local system and if not have try  setup pkg to local system /usr/local/bin
command -v ${_HTTPX} > /dev/null 2>&1 || {
	 echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_HTTPX}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_HTTPX} " >&2; cp -r ${PKG_HTTPX} /usr/local/bin/; }
# pkg dnsprobe, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_DNSPROBE} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_DNSPROBE}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_HTTPX} " >&2; cp -r ${PKG_DNSPROBE} /usr/local/bin/; }

# pkg gobuster, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_GOBUSTER} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_GOBUSTER}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_GOBUSTER} " >&2; cp -r ${PKG_GOBUSTER} /usr/local/bin/; }

# pkg webanalze, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_WEBANALYZE} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_WEBANALYZE}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_WEBANALYZE} " >&2; cp -r ${PKG_WEBANALYZE} /usr/local/bin/; }

# pkg cf-check, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_CFCHECK} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_CFCHECK}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_CFCHECK} " >&2; cp -r ${PKG_CFCHECK} /usr/local/bin/; }

# pkg gowitness, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_GOWITNESS} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_GOWITNESS}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_GOWITNESS} " >&2; cp -r ${PKG_GOWITNESS} /usr/local/bin/; }

# pkg unfurl, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_UNFURL} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_UNFURL}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_UNFURL} " >&2; cp -r ${PKG_UNFURL} /usr/local/bin/; }

# pkg subjack, checking in local system and if not have try setup pkg to local system /usr/local/bin
command -v ${_SUBJACK} > /dev/null 2>&1 || {
         echo -e "${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_SUBJACK}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_SUBJACK} " >&2; cp -r ${PKG_SUBJACK} /usr/local/bin/; }




echo -e "\n${BOLD}[${LBLUE}*${RESET}${BOLD}]${RESET} Load target domain: ${LGREEN}${DOMAIN}${RESET}  "
echo -e "${BOLD}${PADDING}${PADDING}-${RESET}${BOLD}${RESET} ${LGREEN}starting${RESET} scanning @ ${current_date_time} "
echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Running & Checking source to be used  "
echo -e "---------------------------------------------\n"

# Running Source for enumarte subdomain
## This List for check if one of source get errors

#SHODAN               ##  http://developer.shodan.io/billing/
#WEBARCHIVE           ##  http://web.archive.org/
#DNSDUMPSTER          ##  https://dnsdumpster.com/
#VIRUSTOTAL           ##  https://www.virustotal.com/vtapi/v2/domain/
#CERTSPOTTER          ##  https://api.certspotter.com     
#CERTSH               ##  https://crt.sh/
#BINARYEDGE           ##  https://docs.binaryedge.io/api-v2/
#SECURITY_TRAILS      ##  http://securitytrails.com/
#CENSYS               ##  http://censys.io/
#THREATMINER          ##  https://api.threatminer.org
#FINDSUBDOMAIN        ##  http://findsubdomains.com/
#BUFFEROVER           ##  http://dns.bufferover.run
#HACKERTARGET         ##  https://api.hackertarget.com/
#ENTRUST              ##  https://ctsearch.entrust.com/
#THREATCROWD          ##  http://threatcrowd.org/
#RIDDLER              ##  http://riddler.io/


if [[ ${SOURCE} == true ]] ; then
for arr in $(echo ${LIST} | tr "," "\n" | tr '[:upper:]' '[:lower:]'); do
    eval "${arr}=true";
done
    [[ ${shodan} == true ]] && {
    SHODAN
    	if [[ -f ${OUT_SHODAN} ]];then
    		COUNT=$(cat ${OUT_SHODAN} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }
    [[ ${virustotal} == true ]] && {
    VIRUSTOTAL
    	if [[ -f ${OUT_VIRUSTOTAL} ]];then
   		 COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc  -l  )
   			 #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }
    [[ ${certspotter} == true ]] && {
    CERTSPOTTER
    	if [[ -f ${OUT_CERTSPOTTER} ]];then
    		COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc  -l  )
   			# echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${binaryedge} == true ]] && {
    BINARYEDGE
    	if [[ -f ${OUT_BINARYEDGE} ]];then
    		COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${hackertarget} == true ]] && {
    HACKERTARGET
    	if [[ -f ${OUT_HACKERTARGET} ]];then
    		COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${threatminer} == true ]] && {
    THREATMINER
    	if [[ -f ${OUT_THREATMINER} ]];then
    		COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${crtsh} == true ]] && {
    CERTSH
    	if [[ -f ${OUT_CRTSH} ]];then
    		COUNT=$(cat ${OUT_CRTSH} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${bufferover} == true ]] && {
    BUFFEROVER
    	if [[ -f ${OUT_BUFFEROVER} ]];then
    		COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${entrust} == true ]] && {
    #ENTRUST
    	if [[ -f ${OUT_ENTRUST} ]];then
    		COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }


    [[ ${threatcrowd} == true ]] && {
    THREATCROWD
    	if [[ -f ${OUT_THREATCROWD} ]];then
    		COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${dnsdumpster} == true ]] && {
    DNSDUMPSTER
    	if [[ -f ${OUT_DNSDUMPSTER} ]];then
    		COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${riddler} == true ]] && {
    RIDDLER
    	if [[ -f ${OUT_RIDDLER} ]];then
    		COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${webarchive} == true ]] && {
    WEBARCHIVE
    	if [[ -f ${OUT_WEBARCHIVE} ]];then
    		COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${securitytrails} == true ]] && {
    SECURITY_TRAILS
    	if [[ -f ${OUT_STRAILS} ]];then
    		COUNT=$(cat ${OUT_STRAILS} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${censys} == true ]] && {
    CENSYS
    	if [[ -f ${OUT_CENSYS} ]];then
    		COUNT=$(cat ${OUT_CENSYS} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }

    [[ ${rapiddns} == true ]] && {
    RAPIDDNS
        if [[ -f ${OUT_RAPIDDNS} ]];then
                COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }

    [[ ${alienvault} == true ]] && {
    ALIENVAULT
        if [[ -f ${OUT_ALIENVAULT} ]];then
                COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }


    [[ ${commoncrawl} == true ]] && {
    COMMONCRAWL
        if [[ -f ${OUT_COMMONCRAWL} ]];then
                COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }



    [[ ${urlscan} == true ]] && {
    URLSCAN
        if [[ -f ${OUT_URLSCAN} ]];then
                COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }


    [[ ${dnsdb} == true ]] && {
    DNSDB
        if [[ -f ${OUT_DNSDB} ]];then
                COUNT=$(cat ${OUT_DNSDB} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }

    [[ ${spyse} == true ]] && {
    SPYSE
    	if [[ -f ${OUT_SPYSE} ]];then
    		COUNT=$(cat ${OUT_SPYSE} | sort -u | wc  -l  )
    		#echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    	fi
    }


    [[ ${riskiq} == true ]] && {
    RISKIQ
        if [[ -f ${OUT_RISKIQ} ]];then
                COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }

    [[ ${fbcert} == true ]] && {
    FBCERT
        if [[ -f ${OUT_FBCERT} ]];then
                COUNT=$(cat ${OUT_FBCERT} | sort -u | wc  -l  )
                #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
        fi
    }




elif [[ ${SOURCE} == false ]] ; then
	args_source=(SHODAN WEBARCHIVE DNSDUMPSTER VIRUSTOTAL CERTSPOTTER CERTSH BINARYEDGE SECURITY_TRAILS CENSYS THREATMINER BUFFEROVER HACKERTARGET SPYSE THREATCROWD RIDDLER RAPIDDNS ALIENVAULT COMMONCRAWL URLSCAN DNSDB RISKIQ FBCERT)
	for i in "${!args_source[@]}"; do
   		"${args_source[i]}" &
	done
	     wait
fi

echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Get & Count subdomain total From source   "
echo -e "---------------------------------------------\n"
if [[ ${verbose} == true ]] ; then
    if [[ -f ${OUT_SHODAN} ]] ; then
      COUNT=$(cat ${OUT_SHODAN} | sort -u | wc  -l  )
      echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Shodan${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_SHODAN} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi

    if [[ -f ${OUT_HACKERTARGET} ]] ; then
      COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc  -l  )
      echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Hackertarget${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_HACKERTARGET} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi

    if [[ -f ${OUT_VIRUSTOTAL} ]] ; then
      COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc  -l  )
      echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Virustotal${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_VIRUSTOTAL} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi
    if [[ -f ${OUT_CERTSPOTTER} ]] ; then
      COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc  -l  )
      echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Certspotter${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_CERTSPOTTER} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi
    if [[ -f ${OUT_BINARYEDGE} ]] ; then
      COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc  -l  )
      echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}BinaryEdge${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_BINARYEDGE} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi
    if [[ -f ${OUT_THREATMINER} ]] ; then
      COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc  -l  )
      echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatminer${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_THREATMINER} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi
    if [[ -f ${OUT_CRTSH} ]] ; then
        COUNT=$(cat ${OUT_CRTSH} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}CrtSH${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_CRTSH} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_BUFFEROVER} ]] ; then
        COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}BufferOver${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_BUFFEROVER} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_ENTRUST} ]] ; then
        COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Entrust${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_ENTRUST} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_SPYSE} ]] ; then
        COUNT=$(cat ${OUT_SPYSE} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Spyse${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_SPYSE} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_THREATCROWD} ]] ; then
        COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatcrowd${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_THREATCROWD} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_DNSDUMPSTER} ]] ; then
        COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Dnsdumpster${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_DNSDUMPSTER} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_RIDDLER} ]] ; then
        COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Riddler${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_RIDDLER} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_WEBARCHIVE} ]] ; then
        COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Webarchive${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_WEBARCHIVE} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_STRAILS} ]] ; then
        COUNT=$(cat ${OUT_STRAILS} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Securitytrails${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_STRAILS} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi
    if [[ -f ${OUT_CENSYS} ]] ; then
        COUNT=$(cat ${OUT_CENSYS} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Censys${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_CENSYS} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi

    if [[ -f ${OUT_RAPIDDNS} ]] ; then
        COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RapidDNS${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_RAPIDDNS} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi

    if [[ -f ${OUT_ALIENVAULT} ]] ; then
        COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}AlienVault${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_ALIENVAULT} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi

    if [[ -f ${OUT_COMMONCRAWL} ]] ; then
        COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}CommonCrawl${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_COMMONCRAWL} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi


    if [[ -f ${OUT_URLSCAN} ]] ; then
        COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}UrlScan${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_URLSCAN} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi

    if [[ -f ${OUT_DNSDB} ]] ; then
        COUNT=$(cat ${OUT_DNSDB} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}DNSDB${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_DNSDB} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi

    if [[ -f ${OUT_SPYSE} ]] ; then
      COUNT=$(cat ${OUT_SPYSE} | sort -u | wc  -l  )
      echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Spyse${RESET}${DPADDING}\t[${GREEN}${COUNT}${RESET}]"
      cat ${OUT_SPYSE} \
      | while read VERBOSE; do
          echo -e "\t - $VERBOSE"
      done
    fi


    if [[ -f ${OUT_RISKIQ} ]] ; then
        COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RiskIQ${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_RISKIQ} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi

    if [[ -f ${OUT_FBCERT} ]] ; then
        COUNT=$(cat ${OUT_FBCERT} | sort -u | wc  -l  )
        echo -e  "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}FBcert${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
        cat ${OUT_FBCERT} \
        | while read VERBOSE; do
            echo -e "\t - $VERBOSE"
        done
      fi


	
	ARG_PARS_LIST
else
        if [[ -f ${OUT_SHODAN} ]] ; then
          COUNT=$(cat ${OUT_SHODAN} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Shodan: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_HACKERTARGET} ]] ; then
     	    COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Hackertarget: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_SPYSE} ]] ; then
     	    COUNT=$(cat ${OUT_SPYSE} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Spyse: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_VIRUSTOTAL} ]] ; then
     	    COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Virustotal: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_CERTSPOTTER} ]] ; then
     	    COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Certspotter: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_BINARYEDGE} ]] ; then
     	    COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Binaryedge: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_THREATMINER} ]] ; then
     	    COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatminer: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_CRTSH} ]] ; then
       	  COUNT=$(cat ${OUT_CRTSH} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Certsh: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_BUFFEROVER} ]] ; then
       	  COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}BufferOver: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_ENTRUST} ]] ; then
       	  COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Entrust: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_THREATCROWD} ]] ; then
       	  COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatcrowd: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_DNSDUMPSTER} ]] ; then
       	  COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Dnsdumpster: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_RIDDLER} ]] ; then
       	  COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Riddler: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_WEBARCHIVE} ]] ; then
       	  COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Webarchive: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_STRAILS} ]] ; then
       	  COUNT=$(cat ${OUT_STRAILS} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}SecurityTrails: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_CENSYS} ]] ; then
       	  COUNT=$(cat ${OUT_CENSYS} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Censys: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_RAPIDDNS} ]] ; then
          COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RapidDNS: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_ALIENVAULT} ]] ; then
          COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}AlienVault: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_COMMONCRAWL} ]] ; then
          COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}CommonCrawl: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_URLSCAN} ]] ; then
          COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}UrlScanIo: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_DNSDB} ]] ; then
          COUNT=$(cat ${OUT_DNSDB} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}DNSDB: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_RISKIQ} ]] ; then
          COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RiskIQ: Total Subdomain (${COUNT})${RESET}"
        fi

        if [[ -f ${OUT_FBCERT} ]] ; then
          COUNT=$(cat ${OUT_FBCERT} | sort -u | wc  -l  )
          echo -e  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}FBcert: Total Subdomain (${COUNT})${RESET}"
        fi



	ARG_PARS_LIST
fi



## Calling Plugin 
## Configuration plugin on plugins/exec_[name_plugin]

# Test the list of collected subdomains and probe for working http or https servers.
# This feature uses a third-party tool, httprobe.

if [[ ${PLUGIN_HTTPROBE} == true ]];then
     #_HTTPROBE=httprobe
	source ${APP_HTTPROBE}
		exec_httprobe
fi  

# Bruteforce Subdomain Using Gobuster 
# Wordlist: ALL Top SecList DNS, You can change the wordlist, just replace file/path  

if [[ ${PLUGIN_GOBUSTER} == true ]];then
	source ${APP_GOBUSTER}
		exec_gobuster
fi  

# Test based on Ping Sweep and/or by getting HTTP status code.

if [[ ${PLUGIN_PING_SWEEP} == true ]] ; then
	source ${APP_PINGSWEEP}
		exec_pingsweep
fi  

# Ddetect virtualhost (several subdomains which resolve to single IP Address
# resolve the collected subdomains to IP addresses, then classify them if several subdomains resolve to single IP addres
if [[ ${PLUGIN_RESOLV_SD} == true ]] ; then

	source ${APP_RESOLVER}
		exec_resolver
fi


# Get status codes, response from domain list
if [[ ${PLUGIN_STATUS_CODE} == true ]]; then
	source ${APP_HTTPSTATUS}
		exec_httpstatus
fi 


# Port scanning with top-ports using nmap from domain list
if [[ ${PLUGIN_NMAP_PORTS} == true ]] ; then
	source ${APP_NMAPTOP}
		exec_nmaptop

fi

if [[ ${PLUGIN_DNSPROBE} == true ]]; then
	source ${APP_DNSPROBE}
		exec_dnsprobe
fi



# PLUGIN_CFCHECK=true
# Running with argument -rS / --dnsprobe
# Default running with plugin --dnsprobe

if [[ ${PLUGIN_CFCHECK} == true ]]; then
	if [[ ${PLUGIN_DNSPROBE} == true ]] ; then		
       	 source ${APP_CFCHECK}
            exec_cfcheck
	else
       	 source ${APP_DNSPROBE}
	 source ${APP_CFCHECK}
            exec_dnsprobe
            exec_cfcheck
	fi
fi

# Plugin to check Title,Status Code, Lenght
if [[ ${PLUGIN_HTTPX} == true ]]; then
	source ${APP_HTTPX}
		exec_httpx
fi


# Plugin to detect HTTP Request Smuggling / Desync
if [[ ${PLUGIN_SMUGGLER} == true ]]; then
    source ${APP_SMUGGLER}
        exec_smuggler
fi


# Explain about IP DB_PORT
# Data Collecting/Scraping open port from 3rd party (Default::Shodan), For right now just using Shodan [Future::Censys,Zoomeye] 
# More efficient and effective to collecting port from list ip on target [[ Subdomain > IP Resolver > Crawling > Open Port ]]
# Here we can further narrow the targeting port for checking in port scanning

if [[ ${PLUGIN_DB_PORT} == true ]]; then
## Cleaning Log Files ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS}
	source ${APP_DBPORT}
		exec_dbport
fi


# Plugin for Extract parameter from URL (--extract-params/-ep)
# Data Collecting & Scraping URL Parameter from Passive scan (Default::Web Archive, CommonCrawl, UrlScanIO) 
# Regex using DFA Engine (awk,sed)
# Support and Collecting URL with multi Parameter to Fuzzing
# Removing Duplicate Parameter & URL

if [[ ${PLUGIN_EXTRACT_PARAMS} == true ]]; then
	source ${APP_EXTRACT_PARAMS}
		exec_extract_params
fi

#Remove Temporary RAW DATA []
#rm -r ${OUT_RAW_WEBARCHIVE} ${OUT_RAW_COMMONCRAWL} ${OUT_RAW_URLSCAN} ${OUT}/${RESULT_EXTRACT_PARAM} > /dev/null 2>&1


# Subdomain TakeOver Vulnerabilty Scanner
if [[ ${PLUGIN_TAKEOVER} == true ]] ; then
	source ${APP_TAKEOVER}
		exec_takeover
fi 

# Identify technology on websites
# Run argument -aI / --apps-identifider ( -aI webanalyze / -aI webanalyze,wappalyzer
if [[ ${APPS_IDENTIFIER} == true ]] ; then
   # Default running Apps Identifier (wappalyzer)
   if [[ -z ${LIST_API} ]]; then 
      source ${APP_WAPPALYZER}
        exec_wappalyzer
   else 
     for arr_apps in $(echo ${LIST_API} | tr "," "\n" | tr '[:upper:]' '[:lower:]'); do
	 eval "${arr_apps}=true";
     done  
	# Execution The Plugin (Choice Manual)
	[[ ${wappalyzer} == true ]] && {
	    source ${APP_WAPPALYZER} 
		exec_wappalyzer
	}
	# Running Webanalyze
	[[ ${webanalyze} == true ]] && {
	    source ${APP_WEBANALYZE}
                exec_webanalyze 
        }
    fi 
fi


# Screenshots a list of website

# Run argument -sS / --screenshot ( -sS gowitness / -sS webscreenshot ) 
# Default screenshots using gowitness

if [[ ${PLUGIN_DOMAIN_SCREENSHOTS} == true ]]; then	
   if [[ -z ${LIST_SCREENSHOT} ]]; then 
      source ${APP_GOWITNESS}
        exec_gowitness
   else 
     for arr_ass in $(echo ${LIST_SCREENSHOT} | tr "," "\n" | tr '[:upper:]' '[:lower:]'); do
	 eval "${arr_ass}=true";
     done  
	# Execution The Plugin (Choice Manual)
	[[ ${gowitness} == true ]] && {
	    source ${APP_GOWITNESS} 
		exec_gowitness
	}
	# Running Webscreenshot
	[[ ${webscreenshot} == true ]] && {
	    source ${APP_WEBSCREENSHOT}
                exec_webscreenshot
        }
    fi 
fi



# WebSocket Connection Check
if [[ ${PLUGIN_WEBSOCKET} == true ]] ; then
   source ${APP_WEBSOCKET}
		exec_websocket
fi 

# Generate wordlist based on collecting url resources (wayback,urlscan,commoncrawl)
# Running with argument -eP
# Wordlist based on path/param 
# Default running with plugin -eP

if [[ ${PLUGIN_WORDLISTS} == true ]] ; then
	if [[ ${PLUGIN_EXTRACT_PARAMS} == true ]] ; then
	 source ${APP_WORDLISTS}
		exec_wordlists
	else	        
	 source ${APP_EXTRACT_PARAMS}
               exec_extract_params

	 source ${APP_WORDLISTS}
     	       exec_wordlists
	fi
fi 


# Subdomain, IPAddress & Virtualhost (Make Network Graph Mapping)
# nGraph for Mapping Results 
# Run this argument wirh -rS or this argument will rung that argument to perform 
if [[ ${PLUGIN_NGRAPH} == true ]] ; then
        if [[ ${PLUGIN_RESOLV_SD} == true ]] ; then
         source ${APP_GRAPH}
                exec_ngraph
        else            
         source ${APP_RESOLVER}
               exec_resolver

         source ${APP_GRAPH}
               exec_ngraph
        fi
fi 


#Remove Temporary RAW DATA []
rm -r ${OUT_RAW_WEBARCHIVE} ${OUT_RAW_COMMONCRAWL} ${OUT_RAW_URLSCAN} ${OUT}/${RESULT_EXTRACT_PARAM} > /dev/null 2>&1

## Slack Alert Notifications
# For configuration/tutorial to get webhook url following to this site
#     - https://api.slack.com/apps/A01C1PXD7TR/incoming-webhooks?success=1

if [[ ${SLACK} == true ]] ; then
echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Slack alert - Sending Notifications${RESET}"
echo -e "---------------------------------------------\n"
  if [[ ! -z "${YOUR_WEBHOOK_URL}" ]];then
    echo -ne  "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Sending Notifications${RESET}${DPADDING}[${GREEN} ✔ ${RESET}]\n"
     curl -s  -X POST -H 'Content-type: application/json' --data '{"text":"*Sudomy - Subdomain Enumeration & analysis:* \n Information: Automated Recon Done !! \n - Domain: '${DOMAIN}' \n - Date: '${DATE_LOG}'"}' ${YOUR_WEBHOOK_URL}  > /dev/null
  else
    echo -e  "${PADDING}${RED}${PADDING}!${PADDING}${RESET}WEBHOOK URL Required, settings on slack.conf${RESET}\n"	
  fi
fi

# Load template for reporting
source lib/template/_template

if [[ ${REPORTS} == 1 ]]; then

echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Generate Reports: Make report into HTML"  
echo -e "---------------------------------------------\n"
## Copy template to file log foler 
#echo -e "\n${BOLD}[${LBLUE}*${RESET}${BOLD}]${RESET} Make template for reports ${LGREEN}${DOMAIN}${RESET}  "
#echo -e "${BOLD}${PADDING}${PADDING}-${RESET}${BOLD}${RESET} ${LGREEN}Copy template:  output/${DATE_LOG}/${DOMAIN}/reports${RESET}"
echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Make template for reports"
cp -R ${TEMPLATE_REPORT} ${OUT}/${DATE_LOG}/${DOMAIN}/
echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/reports ${RESET} "

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_IP_RESOLVER}" ]] ; then

          COUNT_TOTAL_RESOLVER=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver2.html
        else
          COUNT_TOTAL_RESOLVER=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_IP_RESOLVER} | wc  -l )
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_IP_RESOLVER})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver2.html 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver2.html;fi 
        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_SUBDOMAIN_REV_ALL}" ]] ; then
          COUNT_TOTAL_RESOLVER2=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver.html
        else
          COUNT_TOTAL_RESOLVER2=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_SUBDOMAIN_REV_ALL} | wc  -l )
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_SUBDOMAIN_REV_ALL})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver.html 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver.html;fi 
        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN}" ]] ; then
          COUNT_TOTAL_SUBDOMAINS=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html
        else
           COUNT_TOTAL_SUBDOMAINS=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} | wc  -l  );
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html 
          _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html;fi 

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE}" ]] ; then
          COUNT_TOTAL_HTTPROBE=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html
        else
           COUNT_TOTAL_HTTPROBE=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE} | wc  -l  );
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/valid_probe.html 
          _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/valid_probe.html;fi 

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE}" ]] ; then
          COUNT_TOTAL_200=0 
               _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/status_code.html
        else
          COUNT_TOTAL_200=$(grep -c "200" ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE})
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/status_code.html 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/status_code.html;fi

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/takeover/${RESULT_TAKEOVER}" ]] ; then
          COUNT_TOTAL_TAKEOVER=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/takeover.html
        else
          COUNT_TOTAL_TAKEOVER=$(grep -c "Vulnerable" ${OUT}/${DATE_LOG}/${DOMAIN}/takeover/${RESULT_TAKEOVER}); 
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/takeover/${RESULT_TAKEOVER})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/takeover.html 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/takeover.html;fi

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS}" ]] ; then
          COUNT_TOTAL_NMAP=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/nmap_tops.html
        else
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/nmap_tops.html 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/nmap_tops.html;fi

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_PINGSWEEP}" ]] ; then
          COUNT_TOTAL_PINGSWEEP=0 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/pingsweep.html
        else
          COUNT_TOTAL_PINGSWEEP=$(grep -c "LIVE" ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_PINGSWEEP})
              MAKE_TABLE=$(awk 'BEGIN{print ""} {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print ""}' ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_PINGSWEEP})
              echo ${MAKE_TABLE} >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/pingsweep.html 
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/pingsweep.html
        fi

        if [[ ! -e "${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_WAPPALYZER}" ]]; then
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/apps_identifier.html
        else
              MAKE_TABLE=$(awk -F ';' '{print "<tr>\n<td>"$1"</td>\n<td>"$2"</td>\n</tr>"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_WAPPALYZER})
              echo -e "${MAKE_TABLE}" >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/apps_identifier.html
              _template >> ${OUT}/${DATE_LOG}/${DOMAIN}/report/apps_identifier.html
        fi

# INDEX HTML
          sed -i "s/@TOTAL_SUBDOMAIN@/${COUNT_TOTAL_SUBDOMAINS}/" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html        
          sed -i "s/@TOTAL_RESOLVER@/${COUNT_TOTAL_RESOLVER}/"  ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html
          sed -i "s/@TOTAL_TAKEOVER@/${COUNT_TOTAL_TAKEOVER}/"  ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html
          sed -i "s/@TOTAL_LIVE_HTTPROBE@/${COUNT_TOTAL_HTTPROBE}/"  ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html
          sed -i "s/@TOTAL_LIVE_PINGSWEEP@/${COUNT_TOTAL_PINGSWEEP}/ " ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html
          sed -i "s/@TOTAL_200@/${COUNT_TOTAL_200}/ " ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html

          sed -i "s/@PINGSWEEP_VALUE@/${COUNT_TOTAL_PINGSWEEP}/" ${OUT}/${DATE_LOG}/${DOMAIN}/${CHART2}
          sed -i "s/@HTTPROBE_VALUE@/${COUNT_TOTAL_HTTPROBE}/" ${OUT}/${DATE_LOG}/${DOMAIN}/${CHART2}
          sed -i "s/@STATUS_VALUE@/${COUNT_TOTAL_200}/" ${OUT}/${DATE_LOG}/${DOMAIN}/${CHART2}
## END
    echo -e "\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Successful Created .. "
fi

if [[ $DESTINATION == true ]];then
		echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Sud⍥my has been sucessfully ${GRENN}completed${RESET}"
		echo -e "---------------------------------------------\n"
		echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Location output: "
		[[ ! -e "${OUTFILE}/${OUT_NAME}" ]] \
  			&& mkdir -p "${OUTFILE}/${OUT_NAME}"||true 
			cp -r  ${OUT}/${DATE_LOG}/${DOMAIN} ${OUTFILE}/${OUT_NAME}/ ; rm -r ${OUT}/${DATE_LOG}/

		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN} ${RESET} "
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/report ${RESET} "
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/nGraph ${RESET} "
                echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/wordlists ${RESET} "
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/screenshots ${RESET} \n\n"

else
		echo -e "\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Sud⍥my has been sucessfully ${GRENN}completed${RESET}"  
		echo -e "---------------------------------------------\n"
		echo -e "${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Location output:"
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN} ${RESET} "
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/report ${RESET} "
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/nGraph ${RESET} "
                echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/wordlists ${RESET} "
		echo -e "${BOLD}${PADDING}${PADDING}\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/screenshots ${RESET} \n\n"
fi

